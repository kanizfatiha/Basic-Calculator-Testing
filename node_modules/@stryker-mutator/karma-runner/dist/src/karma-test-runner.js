import semver from 'semver';
import { commonTokens, tokens } from '@stryker-mutator/api/plugin';
import { toMutantRunResult, } from '@stryker-mutator/api/test-runner';
import { karma } from './karma-wrapper.js';
import { createProjectStarter } from './starters/project-starter.js';
import { configureKarma, StrykerReporter, TestHooksMiddleware } from './karma-plugins/index.js';
import { pluginTokens } from './plugin-tokens.js';
createKarmaTestRunner.inject = tokens(commonTokens.injector);
export function createKarmaTestRunner(injector) {
    return injector.provideFactory(pluginTokens.projectStarter, createProjectStarter).injectClass(KarmaTestRunner);
}
const MIN_KARMA_VERSION = '6.3.0';
export class KarmaTestRunner {
    log;
    starter;
    exitPromise;
    runConfig;
    isDisposed = false;
    static inject = tokens(commonTokens.logger, commonTokens.getLogger, commonTokens.options, pluginTokens.projectStarter);
    constructor(log, getLogger, options, starter) {
        this.log = log;
        this.starter = starter;
        const setup = this.loadSetup(options);
        configureKarma.setGlobals({
            getLogger,
            karmaConfig: setup.config,
            karmaConfigFile: setup.configFile,
            disableBail: options.disableBail,
        });
    }
    capabilities() {
        return { reloadEnvironment: true };
    }
    async init() {
        const version = semver.coerce(karma.VERSION);
        if (!version || semver.lt(version, MIN_KARMA_VERSION)) {
            throw new Error(`Your karma version (${version}) is not supported. Please install ${MIN_KARMA_VERSION} or higher`);
        }
        const browsersReadyPromise = StrykerReporter.instance.whenBrowsersReady();
        const { exitPromise } = await this.starter.start();
        this.exitPromise = exitPromise;
        const maybeExitCode = await Promise.race([browsersReadyPromise, exitPromise]);
        if (typeof maybeExitCode === 'number') {
            if (!this.isDisposed) {
                throw new Error(`Karma exited prematurely with exit code ${maybeExitCode}. Please run stryker with \`--logLevel trace\` to see the karma logging and figure out what's wrong.`);
            }
        }
        else {
            // Create new run config. Older versions of karma will always parse the config again when you provide it in `karma.runner.run
            // which results in the karma config file being executed again, which has very bad side effects (all files would be loaded twice and such)
            this.runConfig = await karma.config.parseConfig(null, {
                hostname: StrykerReporter.instance.karmaConfig.hostname,
                port: StrykerReporter.instance.karmaConfig.port,
                listenAddress: StrykerReporter.instance.karmaConfig.listenAddress,
            });
        }
    }
    async dryRun(options) {
        TestHooksMiddleware.instance.configureCoverageAnalysis(options.coverageAnalysis);
        return await this.run();
    }
    async mutantRun(options) {
        TestHooksMiddleware.instance.configureMutantRun(options);
        StrykerReporter.instance.configureHitLimit(options.hitLimit);
        const dryRunResult = await this.run();
        return toMutantRunResult(dryRunResult);
    }
    run() {
        const runPromise = StrykerReporter.instance.whenRunCompletes();
        this.runServer();
        return runPromise;
    }
    async dispose() {
        this.isDisposed = true;
        if (StrykerReporter.instance.karmaServer) {
            await StrykerReporter.instance.karmaServer.stop();
            await this.exitPromise;
        }
        StrykerReporter.instance.karmaServer = undefined;
        StrykerReporter.instance.karmaConfig = undefined;
    }
    loadSetup(options) {
        const defaultKarmaConfig = {
            projectType: 'custom',
        };
        return Object.assign(defaultKarmaConfig, options.karma);
    }
    runServer() {
        karma.runner.run(this.runConfig, (exitCode) => {
            this.log.debug('karma run done with ', exitCode);
        });
    }
}
//# sourceMappingURL=karma-test-runner.js.map